// -----------------------------------------------------------------------
// <copyright file="Reality.cs" company="CSE Global UK">
// TODO: Update copyright text.
// </copyright>
// -----------------------------------------------------------------------

namespace Strava_Centurion
{
    using System;

    /// <summary>
    /// TODO: Update summary.
    /// </summary>
    public class Reality
    {
        #region Physics Constants
        /// <summary>
        /// acceleration due to gravity – 9.8 m/s2
        /// </summary>
        public const double G = 9.8;

        /// <summary>
        /// The Specific Constant for dry air.
        /// Physics: this is a set thing in reality.
        /// </summary>
        public const double SpeicificGasConstantDryAir = 287.05;

        /// <summary>
        /// The Specific Constant for Water Vapor.
        /// Physics: this is a set thing in reality.
        /// </summary>
        public const double SpecificGasConstanthWaterVapor = 461.495;

        /// <summary>
        /// This is the standard density of dry air at sea level.
        /// Theoretical, probably never really happens.
        /// </summary>
        public const double AirDenistyDefault = 1.2466;
        #endregion

        #region Private Member variables for properties
        /// <summary>
        /// The Coefficient of Rolling Resistance.
        /// This will vary in reality over a ride based on the road surfaces.
        /// http://4.bp.blogspot.com/_urSQl6wUA5g/TTZFTUOs6FI/AAAAAAAAIe8/zeE_bHhBpOE/s1600/drag_chart.jpg
        /// </summary>
        private double coefficientOfRollingResistance = 0.0045;

        /// <summary>
        /// This is the drag coefficient. I'm not sure what this is.
        /// </summary>
        private double dragCoefficient = 1.0;//0.5;

        /// <summary>
        /// This is the effective frontal area of rider and bike.
        /// Obviously working this out is rather hard, so it's a guess.
        /// </summary>
        private double effectiveFrontalArea = 1.3; //0.5;

        /// <summary>
        /// Average temp for the ride.
        /// </summary>
        private double temperature = 15.0;
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Coefficient of Rolling Resistance.
        /// This will vary in reality over a ride based on the road surfaces.
        /// </summary>
        public double CoefficientOfRollingResistance
        {
            get
            {
                return this.coefficientOfRollingResistance;
            }

            set
            {
                this.coefficientOfRollingResistance = value;
            }
        }

        /// <summary>
        /// Gets or sets the drag coefficient. I'm not sure what this is.
        /// </summary>
        public double DragCoefficient
        {
            get
            {
                return this.dragCoefficient;
            }

            set
            {
                this.dragCoefficient = value;
            }
        }

        /// <summary>
        /// Gets or sets the effective frontal area of rider and bike.
        /// Obviously working this out is rather hard, so it's a guess.
        /// </summary>
        public double EffectiveFrontalArea
        {
            get
            {
                return this.effectiveFrontalArea;
            }

            set
            {
                this.effectiveFrontalArea = value;
            }
        }

        /// <summary>
        /// Gets or sets the temperature of the ride.
        /// This is used to calculate air density at altitude.
        /// </summary>
        public double Temperature
        {
            get
            {
                return this.temperature;
            }

            set
            {
                this.temperature = value;
            }
        }

        /// <summary>
        /// Gets G.
        /// </summary>
        public double AccelerationDueToGravity
        {
            get
            {
                return G;
            }
        }
        #endregion

        /// <summary>
        /// Calculate the estimated air density at a given altitude.
        /// </summary>
        /// <param name="altitude">Height in meters</param>
        /// <returns>air density in some unit or other</returns>
        public double AirDensity(double altitude)
        {
            /*double density;
            double specificgasconstant;
            density = this.pressureAtAltitude(altitude) / (specificgasconstant * this.temperature);
            return density;*/

            // Default till algorith available:
            return AirDenistyDefault;
        }

        /// <summary>
        /// Calculate a pressure at a given altitude.
        /// </summary>
        /// <param name="altitude">
        /// The altitude.
        /// </param>
        /// <returns>
        /// Pressure in some unit. todo: work out the unit.
        /// </returns>
        /// <exception cref="NotImplementedException">
        /// Die, as I've not written the code yet.
        /// </exception>
        private double PressureAtAltitude(double altitude)
        {
            throw new NotImplementedException();
        }
    }
}
